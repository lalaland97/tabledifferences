import re

def read_sql_file(file_path):
    """
    Reads the content of a SQL file.
    
    Args:
        file_path (str): The path to the SQL file.
    
    Returns:
        str: The content of the SQL file.
    """
    try:
        with open(file_path, 'r') as infile:
            return infile.read()
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' does not exist.")
        return None
    except Exception as e:
        print(f"An unexpected error occurred while reading the file: {e}")
        return None

def write_sql_file(file_path, content):
    """
    Writes content to a SQL file.
    
    Args:
        file_path (str): The path to the SQL file.
        content (str): The content to write to the file.
    """
    try:
        with open(file_path, 'w') as outfile:
            outfile.write(content)
    except Exception as e:
        print(f"An unexpected error occurred while writing to the file: {e}")

def transform_date_conditions(sql_content):
    """
    Transforms specific date conditions in SQL content from 'strt_dt >= 'YYYY-MM-DD''
    to a more flexible 'strt_dt BETWEEN ${REFRESH_START_DATE} AND ${REFRESH_END_DATE}'.

    Args:
        sql_content (str): The SQL content to transform.

    Returns:
        str: The transformed SQL content.
    """
    date_condition_pattern = r"strt_dt\s*>=\s*'(\d{4}-\d{2}-\d{2})'"
    replacement_condition = "strt_dt BETWEEN '${REFRESH_START_DATE}' AND '${REFRESH_END_DATE}'"
    return re.sub(date_condition_pattern, replacement_condition, sql_content, flags=re.IGNORECASE)

def amend_table_names(sql_content, table_mapping):
    """
    Replaces table names in SQL content based on the provided mapping in a case-insensitive way.

    Args:
        sql_content (str): The SQL content to amend.
        table_mapping (dict): A dictionary with old table names as keys and new table names as values.

    Returns:
        str: The SQL content with amended table names.
    """
    for old_table, new_table in table_mapping.items():
        # Use a case-insensitive replacement for table names
        sql_content = re.sub(re.escape(old_table), new_table, sql_content, flags=re.IGNORECASE)
    return sql_content

def transform_sql(input_file, output_file, table_mapping=None):
    """
    Reads a SQL script, applies transformations for date conditions and table names, 
    and writes the transformed SQL to a new file.

    Args:
        input_file (str): The path to the SQL file to read from.
        output_file (str): The path to save the updated SQL file.
        table_mapping (dict, optional): A dictionary to map old table names to new ones. Defaults to None.
    """
    # Read the original SQL script
    sql_content = read_sql_file(input_file)
    if sql_content is None:
        return

    # Transform date conditions
    updated_sql_content = transform_date_conditions(sql_content)

    # If a table mapping is provided, amend table names
    if table_mapping:
        updated_sql_content = amend_table_names(updated_sql_content, table_mapping)

    # Write the updated SQL script back to the output file
    write_sql_file(output_file, updated_sql_content)

    print(f"SQL script successfully transformed and saved to: {output_file}")

if __name__ == "__main__":
    # Provide paths to the input and output SQL files
    input_path = 'input.sql'  # Replace with the path to your SQL script
    output_path = 'output.sql'  # Replace with the desired output file path

    # Define a mapping of old table names to new ones (if needed)
    table_mapping = {
        'old_table_name': 'new_table_name',
        'another_old_table': 'another_new_table'
    }

    # Call the function to transform the SQL script
    transform_sql(input_path, output_path, table_mapping)
