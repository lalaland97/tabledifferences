Please could you explain how each part works import pandas as pd

# Function to check for duplicates in a DataFrame given a list of primary keys
def find_duplicates(df, primary_key):
    duplicate_rows = df[df.duplicated(subset=primary_key, keep=False)]
    return duplicate_rows

# Load the two tables into DataFrames
table_1 = pd.read_csv(r'C:\Users\asus\OneDrive\Desktop\store_sales2.csv')
table_2 = pd.read_csv(r'C:\Users\asus\OneDrive\Desktop\store_sales2.csv')

# Specify the primary key column names
primary_key = ['key', 'date']

# Ensure the primary key is in both tables
for pk in primary_key:
    if pk not in table_1.columns or pk not in table_2.columns:
        raise ValueError(f"Primary key '{pk}' is missing from one of the tables.")

# Check for duplicates in both tables
duplicates_table_1 = find_duplicates(table_1, primary_key)
duplicates_table_2 = find_duplicates(table_2, primary_key)

if not duplicates_table_1.empty:
    duplicate_keys = duplicates_table_1[primary_key].drop_duplicates().to_string(index=False)
    raise ValueError(f"Duplicate primary keys found in Table_1:\n{duplicate_keys}")

if not duplicates_table_2.empty:
    duplicate_keys = duplicates_table_2[primary_key].drop_duplicates().to_string(index=False)
    raise ValueError(f"Duplicate primary keys found in Table_2:\n{duplicate_keys}")

# Initialize report data
report_data = []

# Sort and set the primary key as index
table_1 = table_1.sort_values(by=primary_key).set_index(primary_key)
table_2 = table_2.sort_values(by=primary_key).set_index(primary_key)

# Find common columns between the two tables
common_columns = set(table_1.columns) & set(table_2.columns)

# Ensure indices are consistent before comparison
table_1 = table_1.reindex(table_2.index)

# Identify missing rows between the two tables
merged = table_1.merge(table_2, how='outer', on=primary_key, indicator=True)

missing_rows_table_1 = merged[merged['_merge'] == 'right_only']
missing_rows_table_2 = merged[merged['_merge'] == 'left_only']

# Function to compare two values, considering NaN as equal
def is_equal(val1, val2):
    if pd.isna(val1) and pd.isna(val2):
        return True
    return val1 == val2

# Check for column differences
column_diff_counts = {}

for column in common_columns:
    differences = table_1[column].combine(table_2[column], func=is_equal).astype(bool)
    
    if not differences.all():
        diff_indices = differences[~differences].index
        column_diff_counts[column] = len(diff_indices)

        for idx in diff_indices:
            table_1_value = table_1.loc[idx, column]
            table_2_value = table_2.loc[idx, column]
            report_data.append({
                'Primary Key': idx,
                'Issue': f'Difference in column {column}',
                'Table_1': table_1_value,
                'Table_2': table_2_value
            })

# Add missing rows to the report
if not missing_rows_table_1.empty:
    for idx in missing_rows_table_1.index:
        report_data.append({
            'Primary Key': idx,
            'Issue': 'Missing in Table_1',
            'Table_1': 'Missing',
            'Table_2': 'Exists'
        })

if not missing_rows_table_2.empty:
    for idx in missing_rows_table_2.index:
        report_data.append({
            'Primary Key': idx,
            'Issue': 'Missing in Table_2',
            'Table_1': 'Exists',
            'Table_2': 'Missing'
        })

# Create a DataFrame for the report
report_df = pd.DataFrame(report_data)

# Save the report to a CSV file
report_filename = 'comparison_report2.csv'
report_df.to_csv(report_filename, index=False)

print(f"Report saved to {report_filename}")

# Display summary or all differences based on user choice
user_choice = input("Do you want to print all differences or just a summary? (Enter 'all' or 'summary'): ").lower()

if user_choice == 'all':
    for item in report_data:
        print(f"Primary Key: {item['Primary Key']}, Issue: {item['Issue']}")
        if 'Table_1' in item:
            print(f"  - Table_1: {item['Table_1']}")
        if 'Table_2' in item:
            print(f"  - Table_2: {item['Table_2']}")
elif user_choice == 'summary':
    if column_diff_counts:
        print("Column Differences Summary:")
        for column, diff_count in column_diff_counts.items():
            print(f"  - {column}: {diff_count} differences")

    if not missing_rows_table_1.empty or not missing_rows_table_2.empty:
        print("Missing Rows Summary:")
        if not missing_rows_table_1.empty:
            print("Table_1 is missing rows.")
        if not missing_rows_table_2.empty:
            print("Table_2 is missing rows.")
