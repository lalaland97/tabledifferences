import re

def transform_sql_date_conditions(input_file, output_file):
    """
    Transforms SQL scripts by replacing date conditions like:
    `strt_dt >= 'YYYY-MM-DD'` or `strt_dt >= ‘YYYY-MM-DD’` 
    with:
    `strt_dt between '${REFRESH_START_DATE}' and '${REFRESH_END_DATE}'`.

    Handles variations in spacing, quoting, and formatting.

    Args:
        input_file (str): Path to the input SQL file.
        output_file (str): Path to save the transformed SQL file.
    """
    # Regex to match `strt_dt >=` with:
    # - Smart quotes (`‘` or `’`)
    # - Regular single quotes (`'`)
    # - Double quotes (`"`)
    # - Spaces or tabs around the operator
    date_condition_pattern = r"strt_dt\s*>=\s*[‘’'\"`]?\s*(\d{4}-\d{2}-\d{2})\s*[‘’'\"`]?"

    # Replacement string
    replacement_condition = "strt_dt between '${REFRESH_START_DATE}' and '${REFRESH_END_DATE}'\n"

    try:
        # Read the input SQL file
        with open(input_file, 'r', encoding='utf-8') as infile:
            sql_content = infile.read()

        # Log the original SQL content for debugging
        print(f"Original SQL content:\n{sql_content}\n")

        # Perform the replacement
        updated_sql_content = re.sub(date_condition_pattern, replacement_condition, sql_content)

        # Log the transformed SQL content for debugging
        print(f"Transformed SQL content:\n{updated_sql_content}\n")

        # Write the updated SQL content to the output file
        with open(output_file, 'w', encoding='utf-8') as outfile:
            outfile.write(updated_sql_content)

        print(f"Transformation complete. Updated SQL script saved to: {output_file}")

    except FileNotFoundError:
        print(f"Error: The file '{input_file}' was not found.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    # Specify the input and output file paths
    input_file_path = 'input.sql'  # Path to the input SQL file
    output_file_path = 'output.sql'  # Path to save the transformed SQL file

    # Transform the SQL script
    transform_sql_date_conditions(input_file_path, output_file_path)
