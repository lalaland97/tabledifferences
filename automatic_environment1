import re
import os
from datetime import datetime

def remove_comments(script):
    script = re.sub(r'--.*', '', script)
    script = re.sub(r'/\*.*?\*/', '', script, flags=re.DOTALL)
    return script

def extract_tables(script):
    script = remove_comments(script)

    create_table_pattern = re.compile(r'CREATE\s+(MULTISET\s+)?(VOLATILE\s+)?TABLE\s+(\w+\.\w+)\s+AS', re.IGNORECASE)
    other_table_pattern = re.compile(r'(INSERT\s+INTO|MERGE\s+INTO|JOIN|FROM|UPDATE)\s+(\w+\.\w+)', re.IGNORECASE)

    tables = set()
    volatile_tables = set()

    create_matches = create_table_pattern.findall(script)
    for match in create_matches:
        if len(match) >= 3:
            table_name = match[2]
            tables.add(table_name)
            if match[1] and 'VOLATILE' in match[1].strip().upper():
                volatile_tables.add(table_name)

    other_matches = other_table_pattern.findall(script)
    for match in other_matches:
        if len(match) >= 2:
            table_name = match[1]
            if table_name not in volatile_tables:
                tables.add(table_name)

    tables = {table for table in tables if '.' in table}
    volatile_tables = {table for table in volatile_tables if '.' in table}

    return list(tables), list(volatile_tables)

def generate_statements(tables, target_db, with_data=True):
    statements = []
    table_mapping = {}
    unique_tables = set(tables)

    for table in unique_tables:
        _, table_name = table.split('.')
        test_table_name = f"{table_name}_test"
        table_mapping[table] = f"{target_db}.{test_table_name}"
        if with_data:
            statement = f"CREATE TABLE {target_db}.{test_table_name} AS {table} WITH DATA;"
        else:
            statement = f"CREATE TABLE {target_db}.{test_table_name} AS {table} WITH NO DATA;"
        statements.append(statement)
    
    return statements, table_mapping

def create_test_tables(script, target_db, with_data=True):
    tables, volatile_tables = extract_tables(script)
    non_volatile_tables = [table for table in tables if table not in volatile_tables]
    test_statements, table_mapping = generate_statements(non_volatile_tables, target_db, with_data)
    return test_statements, table_mapping

def replace_tables(script, table_mapping, tables_to_keep, databases_to_exclude):
    for original_table, test_table in table_mapping.items():
        database_name, _ = original_table.split('.')
        if original_table not in tables_to_keep and database_name not in databases_to_exclude:
            script = re.sub(rf'\b{re.escape(original_table)}\b', test_table, script)
    return script

def process_files(directory_path, target_db, with_data=True, table_filter=None, single_output=False, specific_file=None, tables_to_keep=None, databases_to_exclude=None):
    all_statements = []

    if tables_to_keep is None:
        tables_to_keep = set()

    if databases_to_exclude is None:
        databases_to_exclude = set()

    files_to_process = []
    if specific_file:
        if not specific_file.endswith('.sql'):
            specific_file += '.sql'
        files_to_process = [specific_file]
    else:
        files_to_process = [f for f in os.listdir(directory_path) if f.endswith(".sql")]

    for filename in files_to_process:
        input_path = os.path.join(directory_path, filename)
        
        with open(input_path, 'r') as file:
            script = file.read()
        
        if table_filter and not re.search(rf'\b{table_filter}\b', script, re.IGNORECASE):
            continue

        test_statements, table_mapping = create_test_tables(script, target_db, with_data)

        base_filename = os.path.splitext(filename)[0]

        if single_output:
            all_statements.extend(test_statements)
        else:
            output_path = os.path.join(directory_path, f"{base_filename}_test.sql")
            with open(output_path, 'w') as file:
                for statement in test_statements:
                    file.write(statement + '\n')
            print(f"Processed {filename} and saved test table SQL statements to {base_filename}_test.sql")
        
        modified_script = replace_tables(script, table_mapping, tables_to_keep, databases_to_exclude)
        modified_path = os.path.join(directory_path, f"{base_filename}_test.sql")
        with open(modified_path, 'w') as file:
            file.write(modified_script)
        print(f"Processed {filename} and saved modified SQL script to {base_filename}_test.sql")

    if single_output and all_statements:
        unique_statements = set(all_statements)
        output_path = os.path.join(directory_path, "test_tables.sql")
        with open(output_path, 'w') as file:
            for statement in unique_statements:
                file.write(statement + '\n')
        print(f"All test table SQL statements have been saved to {output_path}")


if __name__ == "__main__":
    directory_path = r"C:\Users\asus\OneDrive\Desktop\sql_scripts"

    with_data_input = input("Do you want to create the tables with data? (yes/no): ").strip().lower()
    with_data = with_data_input in ['yes', 'y']

    table_filter_input = input("Enter a table name to create test environments for only scripts containing this table (leave blank to process all scripts): ").strip()
    table_filter = table_filter_input if table_filter_input else None

    specific_file_input = input("Do you want to process a specific file? Enter the filename (with or without .sql extension) or leave blank to process all files: ").strip()
    specific_file = specific_file_input if specific_file_input else None

    single_output_input = input("Do you want to output all statements to a single file? (yes/no): ").strip().lower()
    single_output = single_output_input in ['yes', 'y']

    tables_to_keep_input = input("Enter the table names to keep unchanged, separated by commas (e.g., database1.table1,database2.table2): ").strip()
    tables_to_keep = set(tables_to_keep_input.split(',')) if tables_to_keep_input else set()

    databases_to_exclude_input = input("Enter the database names to exclude from creating a test environment, separated by commas (e.g., database1,database2): ").strip()
    databases_to_exclude = set(databases_to_exclude_input.split(',')) if databases_to_exclude_input else set()

    target_db_input = input("Enter the target database for the test tables: e.g Lab_tc14_otmidb ").strip()

    process_files(directory_path, target_db_input, with_data, table_filter, single_output, specific_file, tables_to_keep, databases_to_exclude)
